{
  "generic": "`generic`\n---\nThis macro package defines macros that are useful in almost any program.\n\nCurrently defined macros are:\n\n```ca65\n  .macro  add  Arg  ; add without carry\n          clc\n          adc  Arg\n  .endmacro\n  .macro  sub  Arg  ; subtract without borrow\n          sec\n          sbc  Arg\n  .endmacro\n  .macro  bge  Arg  ; branch on greater-than or equal\n          bcs  Arg\n  .endmacro\n  .macro  blt  Arg  ; branch on less-than\n          bcc  Arg\n  .endmacro\n  .macro  bgt  Arg  ; branch on greater-than\n          .local  L\n          beq  L\n          bcs  Arg\n  L:\n  .endmacro\n  .macro  ble  Arg  ; branch on less-than or equal\n          beq  Arg\n          bcc  Arg\n  .endmacro\n\n  .macro  bnz  Arg  ; branch on not zero\n          bne  Arg\n  .endmacro\n\n  .macro  bze  Arg  ; branch on zero\n          beq  Arg\n  .endmacro\n```",
  "longbranch": "`longbranch`\n---\nThis macro package defines long conditional jumps. They are named like the short counterpart but with the 'b' replaced by a 'j'. Here is a sample definition for the \"`jeq`\" macro, the other macros are built using the same scheme:\n\n```ca65\n  .macro  jeq  Target\n          .if     .def(Target) .and ((*+2)-(Target) <= 127)\n          beq  Target\n          .else\n          bne     *+5\n          jmp  Target\n          .endif\n  .endmacro\n```\n\nAll macros expand to a short branch, if the label is already defined (back jump) and is reachable with a short jump. Otherwise the macro expands to a conditional branch with the branch condition inverted, followed by an absolute jump to the actual branch target.\n\nThe package defines the following macros:\n\n```\n  jeq, jne, jmi, jpl, jcs, jcc, jvs, jvc\n```",
  "apple2": "`apple2`\n---\nThis macro package defines a macro named `scrcode`. It takes a string\nas argument and places this string into memory translated into screen codes.",
  "atari": "`atari`\n---\nThis macro package defines a macro named `scrcode`. It takes a string\nas argument and places this string into memory translated into screen codes.",
  "cbm": "`cbm`\n---\nThis macro package defines a macro named `scrcode`. It takes a string\nas argument and places this string into memory translated into screen codes.",
  "cpu": "`cpu`\n---\nThis macro package does not define any macros but constants used to examine the value read from the [`.CPU`](https://cc65.github.io/doc/ca65.html#.cpu) pseudo variable. For each supported CPU a constant similar to\n\n```ca65\n    CPU_6502\n    CPU_65SC02\n    CPU_65C02\n    CPU_65816\n    CPU_SWEET16\n    CPU_HUC6280\n    CPU_4510\n    CPU_6502DTV\n```\n\nis defined. These constants may be used to determine the exact type of the currently enabled CPU. In addition to that, for each CPU instruction set, another constant is defined:\n\n```ca65\n    CPU_ISET_6502\n    CPU_ISET_65SC02\n    CPU_ISET_65C02\n    CPU_ISET_65816\n    CPU_ISET_SWEET16\n    CPU_ISET_HUC6280\n    CPU_ISET_4510\n    CPU_ISET_6502DTV\n```\n\nThe value read from the [`.CPU`](https://cc65.github.io/doc/ca65.html#.CPU) pseudo variable may be checked with [.BITAND](https://cc65.github.io/doc/ca65.html#operators) to determine if the currently enabled CPU supports a specific instruction set. For example the 65C02 supports all instructions of the 65SC02 CPU, so it has the `CPU_ISET_65SC02` bit set in addition to its native `CPU_ISET_65C02` bit. Using\n\n```ca65\n  .if (.cpu .bitand CPU_ISET_65SC02)\n      lda (sp)\n  .else\n      ldy #$00\n      lda (sp),y\n  .endif\n```\n\nit is possible to determine if the\n\n```ca65\n      lda (sp)\n```\n\ninstruction is supported, which is the case for the 65SC02, 65C02 and 65816 CPUs (the latter two are upwards compatible to the 65SC02).",
  "module": "`module`\n---\nThis macro package defines a macro named `module_header`. It takes an\nidentifier as argument and is used to define the header of a module both\nin the dynamic and static variant."
}